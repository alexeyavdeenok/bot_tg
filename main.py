import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from logger import logger  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ª–æ–≥–≥–µ—Ä
from database import *
from keyboard_builder import *
from aiogram import F
from dotenv import load_dotenv
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    await db.add_user(message.from_user.id, message.from_user.username)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç.')

@dp.message(Command('help'))
async def cmd_help(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /help")
    await message.answer('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞,\n/help- —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'
                         '\n/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)'
                         '\n/todo - TODO –ª–∏—Å—Ç (–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)'
                         '\n/game - –∏–≥—Ä–∞—Ç—å (–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)'
                         '\n/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)')

@dp.message(Command('schedule'))
async def cmd_schedule(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /schedule")
    await message.answer(f'–¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫           ', reply_markup=get_keyboard_week('03.03.2025 - 09.03.2025'))

@dp.callback_query(NumbersCallbackFactory.filter(F.action == 'today'))
async def callback_numbers(callback: types.CallbackQuery, callback_data: NumbersCallbackFactory):
    await callback.message.edit_text(f'–¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫', reply_markup=get_keyboard_day('05.03.2025'))

@dp.message((F.text.lower() == 'z') | (F.text.lower() == 'zov'))
async def echo_1(message: types.Message):
    await message.answer('–°–õ–ê–í–ê Züôè‚ù§Ô∏è–°–õ–ê–í–ê Züôè‚ù§Ô∏è–ê–ù–ì–ï–õ–ê –•–†–ê–ù–ò–¢–ï–õ–Ø Z –ö–ê–ñ–î–û–ú–£ –ò–ó –í–ê–°üôè‚ù§Ô∏è–ë–û–ñ–ï –•–†–ê–ù–ò Züôè‚ù§Ô∏è–°–ü–ê–°–ò–ë–û –í–ê–ú –ù–ê–®–ò Züôèüèº‚ù§Ô∏èüá∑üá∫ –•–†–û–ù–ò Z‚úäüá∑üá∫üíØ–°–ª–∞–≤–∞ –ë–æ–≥—É Züôè‚ù§Ô∏è–°–õ–ê–í–ê Züôè‚ù§Ô∏è–°–õ–ê–í–ê Züôè‚ù§Ô∏è–ê–ù–ì–ï–õ–ê –•–†–ê–ù–ò–¢–ï–õ–Ø Z –ö–ê–ñ–î–û–ú–£')


@dp.message()
async def echo(message: types.Message):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    await message.answer(f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}')

async def bot_shutdown(dp: Dispatcher):
    logger.warning("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await db.disconnect()
    await bot.session.close()

async def main():
    global db
    try:
        db = Database()
        await db.connect()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∑–¥–µ –Ω–∞—à –ª–æ–≥–≥–µ—Ä
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        user = await db.get_user(847687859)
        await bot_shutdown(dp)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.warning("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)