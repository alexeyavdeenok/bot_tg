import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from logger import logger  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ª–æ–≥–≥–µ—Ä
from database import *
from keyboard_builder import *
from aiogram import F
from dotenv import load_dotenv
import os
from schedule import *

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
user_schedules = {}

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.add_user(user_id, username)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    schedule = Schedule(user_id, db)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    schedule.save_to_database()
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç. –¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ.')

@dp.message(Command('help'))
async def cmd_help(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /help")
    await message.answer('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞,\n/help- —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'
                         '\n/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)'
                         '\n/todo - TODO –ª–∏—Å—Ç (–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)'
                         '\n/game - –∏–≥—Ä–∞—Ç—å (–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)'
                         '\n/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)')

@dp.message(Command('schedule'))
async def cmd_schedule(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /schedule")
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
    if user_id not in user_schedules:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        schedule = Schedule(user_id, db)
        await schedule.load_events()
        user_schedules[user_id] = schedule
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = user_schedules[user_id]

    await message.answer(f'{str(schedule.day_to_show)}', reply_markup=get_keyboard_day())

@dp.callback_query(NumbersCallbackFactory.filter(F.action == 'today'))
async def callback_numbers(callback: types.CallbackQuery, callback_data: NumbersCallbackFactory):
    await callback.message.edit_text(f'–¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫', reply_markup=get_keyboard_day())

@dp.callback_query(NumbersCallbackFactory.filter(F.action == 'change'))
async def callback_numbers(callback: types.CallbackQuery, callback_data: NumbersCallbackFactory):
    schedule = user_schedules[callback.from_user.id]
    await callback.message.edit_text(f'{str(schedule.day_to_show)}', reply_markup=get_keyboard_change_day(schedule.day_to_show.list_events))

@dp.callback_query(NumbersCallbackFactory.filter(F.action == 'back_day'))
async def callback_days(callback: types.CallbackQuery, callback_data: NumbersCallbackFactory):
    value = callback_data.value
    schedule = user_schedules[callback.from_user.id]
    if value == -1:
        schedule.prev_day()
    else:
        schedule.next_day()
    await callback.message.edit_text(f'{str(schedule.day_to_show)}', reply_markup=get_keyboard_day())

@dp.callback_query(NumbersCallbackFactory.filter(F.action == 'cancel_to_week'))
async def callback_days(callback: types.CallbackQuery, callback_data: NumbersCallbackFactory):
    """
    –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤—Å–µ–≥–¥–∞ –∫ —Ç–µ–∫—É—â–µ–π –∫–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç 
    """
    schedule = user_schedules[callback.from_user.id]
    schedule.return_to_current_day()
    await callback.message.edit_text(f'{str(schedule.week_to_show)}', reply_markup=get_keyboard_week())

    
@dp.message((F.text.lower() == 'z') | (F.text.lower() == 'zov'))
async def echo_1(message: types.Message):
    await message.answer('–°–õ–ê–í–ê Züôè‚ù§Ô∏è–°–õ–ê–í–ê Züôè‚ù§Ô∏è–ê–ù–ì–ï–õ–ê –•–†–ê–ù–ò–¢–ï–õ–Ø Z –ö–ê–ñ–î–û–ú–£ –ò–ó –í–ê–°üôè‚ù§Ô∏è–ë–û–ñ–ï –•–†–ê–ù–ò Züôè‚ù§Ô∏è–°–ü–ê–°–ò–ë–û –í–ê–ú –ù–ê–®–ò Züôèüèº‚ù§Ô∏èüá∑üá∫ –•–†–û–ù–ò Z‚úäüá∑üá∫üíØ–°–ª–∞–≤–∞ –ë–æ–≥—É Züôè‚ù§Ô∏è–°–õ–ê–í–ê Züôè‚ù§Ô∏è–°–õ–ê–í–ê Züôè‚ù§Ô∏è–ê–ù–ì–ï–õ–ê –•–†–ê–ù–ò–¢–ï–õ–Ø Z –ö–ê–ñ–î–û–ú–£')


@dp.message()
async def echo(message: types.Message):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    await message.answer(f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}')

async def bot_shutdown(dp: Dispatcher):
    logger.warning("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await db.disconnect()
    await bot.session.close()

async def main():
    global db
    try:
        db = Database()
        await db.connect()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∑–¥–µ –Ω–∞—à –ª–æ–≥–≥–µ—Ä
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        user = await db.get_user(847687859)
        await bot_shutdown(dp)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.warning("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)